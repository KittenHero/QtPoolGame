@startuml

class Initializer {
    +PoolGame createPoolgame(string path)
}

class GameBuilder {
    -Table m_table
    -vector<Ball> m_ball
    -AbstractFactory m_factory
    
    +void addBall(QJsonObject spec)
    +void buildTable(QJsonObject spec)
    +PoolGame getGame()
}

interface AbstractFactory <<interface>> {
    +{abstract} Ball makeBall(QJsonObject spec)
    +{abstract} Table makeTable(QJsonObject spec)
}

class StageOneFactory {
    +Ball makeBall(QJsonObject spec)
    +Table makeTAble(QJsonObject spec)
}

class StageTwoFactory {
    +Ball makeBall(QJsonObject spec)
    +Table makeTAble(QJsonObject spec)
}

class Dialog {
    PoolGame m_game
    QTimer m_framerateTimer
    QTimer m_timestepTimer
    --
    +void start()
    +void paintEvent(QPaintEvent)
    #void
    --slots--
    +void runSimulationStep()
    
}

abstract PoolGame <<abstract>> {
    +{abstract} void simulateTimeStep(float)
    +{abstract} void draw(QPainter)
    +{abstract} void handleEvent(QEvent)
}

class BasePool {
    -Table m_table
    -vector<Ball> m_ball

    +simulateTimeStep(float)
    +void draw(QPainter)
    +QSize size()
    -void collision(Ball, Ball)
    -void collision(Table, Ball)
}

abstract GameFeature <<abstract>> {
    -PoolGame m_game
    +void draw(QPainter)
    +void simulateTimeStep(float)
    +void handleEvent(QEvent)
}

class CueBallControlFeature {
    -Ball* m_cueball
    -Pair<QVector2D, QVector2D> m_clickCoord
    +void handleEvent(QEvent)
    +void simulateTimeStep(float)
    +void draw(QPainter)
}

class ExplodingBallFeature {
    -PoolGame m_game
    -Ball* m_cueball
    +void handleEvent(QEvent)
    +void simulateTimeStep(float)
    +void draw(QPainter)
}

class PocketInteractionFeature {
    -PoolGame m_game
    -Ball* m_cueball
    +void handleEvent(QEvent)
    +void simulateTimeStep(float)
    +void draw(QPainter)
}

abstract class Ball <<abstract>> {
    #QVector2D m_position
    #QVector2D m_velocity
    #float m_radius
    #float m_mass
    
    +{abstract} void changePosition(QVector2D deltaP)
    +{abstract} void changeVelocity(QVector2D deltaX)
    +{abstract} void daw(QPainter)
    +{abstract} void move(float dtime)
    +various getters() and setters()
}

abstract class Table <<abstract>> {
    #float m_width
    #float m_height
    #float m_friction
    
    +{abstract} void daw(QPainter)
    +various getters()
}

class StageOneBall {
    -QColor m_colour
    
    +void setColor(QColor)
    +const QColor& colour()
}

class MatryoshkaBall {
    -QColor m_colour
    -vector<Ball> m_nested
    -{static} boolean m_showNested
    
    +void draw(QPainter)
    +void setColor(QColor)
    +{static} void toggleInnerVisibility()
}

class StageOneTable {
    -QColor m_colour
    +void draw(QPainter)
}

class PocketedTable {
    -vector<Pair<QVector2D, float>> m_pockets
    -QColor m_color
    
    +void draw(QPainter)
    +void addPocket(QVector2D centre, float radius)
    +void clearPockets()
}

Initializer     --->    GameBuilder

Dialog          *---    PoolGame
BasePool        *---    Table
BasePool        *---    Ball

PoolGame        <|--    BasePool

PoolGame        <|--    GameFeature
GameFeature     *---    PoolGame

GameFeature     <|--    CueBallControlFeature
GameFeature     <|--    PocketInteractionFeature
GameFeature     <|--    ExplodingBallFeature

Table           <|..    StageOneTable
Table           <|..    PocketedTable
Ball            <|..    StageOneBall
Ball            <|..    MatryoshkaBall
MatryoshkaBall  ---*    Ball

AbstractFactory ---*    GameBuilder
PoolGame        <...    GameBuilder

StageOneFactory ..|>    AbstractFactory
StageTwoFactory ..|>    AbstractFactory

StageOneBall    <...    StageOneFactory
StageOneTable   <...    StageOneFactory

PocketedTable   <...    StageTwoFactory
MatryoshkaBall  <...    StageTwoFactory


class Key #ffee77 {
	+public
	#protected
	-private
	+publiic method()
	#protected method()
	-private method()
	{abstract} virtual method()
	{static} static
}

skinparam Class {
	BackgroundColor<<abstract>> PaleGreen
	BackgroundColor<<interface>> PowderBlue
}

hide circle
hide empty members

@enduml
